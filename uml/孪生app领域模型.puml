@startuml
!include lib_eventstorming.puml

Command("AddProductCommand") [
    添加产品
    --field--
    *产品型号
    产品通信类型
    产品tsl
    --rule--
    1.产品型号不能相同
    2.添加成功，发布产品已添加。
    --event--
    产品已添加 ProductAdded
]

Command("DeleteProductCommand") [
    删除产品
    --field--
    *产品型号
    --rule--
    1.根据产品型号删除产品
    2.删除成功，发布产品已删除。
    --event--
    产品已删除 ProductDeleted
]

Command("HandleServiceCommand") [
    处理服务
    --field--
    设备通信ID
    payload
    --rule--
    1.解析服务并处理
    2.缓存服务
    --event--
    设备服务已触发 ServiceTriggered
]

Command("HandlePropertyCommand") [
    处理属性
    --field--
    设备通信ID
    payload
    --rule--
    1.解析属性
    2.更新属性
    --event--
    设备属性已更新 PropertyChangedAdded
]

Command("ParseProductTslCommand") [
    解析产品的物的语言Tsl
    --field--
    产品ID
    --rule--
    1.从服务器或者本地解析物的语言TSL
    2.解析的结果为属性列表、事件列表、服务列表
    3.解析完 发布产品Tsl已解析
    --event--
    产品Tsl已解析TslParsed
]

Command("AddDeviceCommand") [
    添加设备
    --field--
    *设备通信ID
    设备名称
    产品型号
    产品通信类型
    --rule--
    1.设备通信类型：wifi、4g
    2.设备通信ID：设备通信类型当是wifi时为mac，4g时为imei
    3.产品通信类型 产品型号都为后台产品定义出来的
    4.设备通信ID是从后台创建出来的
    5.以上参数除了设备名称，其他都是从后台中获得，否则无法和后台mqtt通信，暂不验证。
    6.添加成功，发布设备已添加。
    --event--
    设备已添加 DeviceAdded
]

Command("DeleteDeviceCommand") [
    删除设备
    --field--
    *设备通信ID
    --rule--
    1.删除设备前需要停止连接
    2.删除设备成功 发布设备已删除
    --event--
    设备已删除 DeviceDeleted
]

Command("ConnectDeviceCommand") [
    连接设备
    --field--
    *设备通信ID
    产品型号
    产品通信类型
    连接相关信息
    --rule--
    1.按照协议接入mqtt连接，并且监听相应的topic，收到的数据需要同步到本地
    2.掉线后重新连接
    3.设备连接成功 发布设备已连接
    --event--
    设备已连接 DeviceConnected
]

Command("HandleReceiveDeviceDisconnectedCommand") [
    收到设备断开连接并处理
    --field--
    设备通信ID
    --rule--
    1.触发重连
    2.设备掉线日志
]

Command("HandlerReceivedMessageCommand") [
    收到设备消息并处理
    --rule--
    1.设备收到的消息，添加到日志
    2.更新本地属性、触发服务、发出事件
]

Command("DisConnectDeviceCommand") [
    主动断开连接设备
    --field--
    设备通信ID
    --rule--
    1.断开设备连接成功 发布设备已断开
    2.添加日志mqtt已断开
    --event--
    设备已断开 DeviceDisConnected
]

Command("PublishMessageCommand") [
    发布mqtt消息
    --field--
    设备通信ID
    --rule--
    1.修改属性 发布属性已更新
    2.触发事件 发布事件已添加
    3.添加日志mqtt已发出
    --event--
    设备属性已更新 PropertyChangedAdded
    设备事件已发送 EventPublished
]

Command("FirstUpSettingCommand") [
    首次上报设置
    --field--
    设备通信ID
    属性keys
    --rule--
    1.开关
    2.哪些属性
    3.设置成功 发布时间首次上报设置已设置
    --event--
    设备首次连接上报已修改 FirstUpSettingChanged
]

Command("IntervalUpSettingCommand") [
    定时上报设置
    --field--
    设备通信ID
    属性keys + internal
    --rule--
    1.开关
    2.哪些属性 间隔多久上报
    3.设置成功 发布时间定时上报设置已设置
    --event--
    定时上报已修改 IntervalUpSettingChanged
]

Command("AddLoggerCommand") [
    添加日志
    --field--
    *自增ID
    设备通信ID
    消息时间
    clientID
    payload
    在线状态
    发布成功状态
    --rule--
    1.日志分为所有、上/下行、在离线、成功、失败、上报事件、服务触发
    2.发布日志已添加事件
    --event--
    日志已添加 LoggerAdded
]




Policy("ProductDeletedPolicy") [
    产品被删除
    --rule--
    1.删除相关设备
]

Policy("DeviceReconnectedPolicy") [
    触发设备重连
    --rule--
    1.重连
]

Policy("AddLoggerPolicy") [
    触发添加日志
    --rule--
    1.添加日志
]

Policy("ToHandlePropertyPolicy") [
    属性更新
    --rule--
    1.更新本地属性
]



Policy("ToHandleServicePolicy") [
    触发对服务的消息处理
    --rule--
    1.当收到的消息类型是服务时，触发对服务的处理。
]

DomainEvent("ProductAdded") [
    产品已添加
    --field--
    产品ID/产品型号
    产品通信类型
    tsl
]

DomainEvent("ProductDeleted") [
    产品已删除
    --field--
    产品ID/产品型号
]





DomainEvent("DeviceDeleted") [
    设备已删除
    --field--
    设备通信ID
]

DomainEvent("DeviceAdded") [
    设备已添加
    --field--
    设备通信ID
]

DomainEvent("DeviceDeleted") [
    设备已删除
    --field--
    设备通信ID
]

DomainEvent("DeviceConnected") [
    设备已连接
    --field--
    设备通信ID
]

DomainEvent("DeviceDisConnected") [
    设备已断开
    --field--
    设备通信ID
]

DomainEvent("TslParsed") [
    产品Tsl已解析
    --field--
    产品ID/产品型号
    tsl propertyList、eventList、serviceList
]

DomainEvent("PropertyChangedAdded") [
    设备属性已更新
    --field--
    设备通信ID
    属性key-value
]

DomainEvent("EventPublished") [
    设备事件已发送
    --field--
    设备通信ID
    事件key-value
]

DomainEvent("ServiceTriggered") [
    设备服务已触发
    --field--
    设备通信ID
    服务key-value
]

DomainEvent("FirstUpSettingChanged") [
    设备首次连接上报已修改
    --field--
    设备通信ID
    属性keys
]

DomainEvent("IntervalUpSettingChanged") [
    定时上报已修改
    --field--
    设备通信ID
    属性keys+间隔
]

DomainEvent("LoggerAdded") [
    日志已添加
    --field--
    设备通信ID
    消息时间
    clientID
    payload
    在线状态
    发布成功状态
]





Aggregate("Product")[
    产品
    --id--
    产品型号
    --field--
    产品通信类型
    tsl原始数据
    tsl版本
    List<TslProperty>
    List<TslEvent>
    List<TslService>
    --method--
    解析产品tsl
]

Aggregate("VirtualDevice") [
    孪生设备
  --id--
    设备通信ID
    --field--
    设备名称
    产品型号
    产品通信类型
    设备连接状态
    当前属性Map<TslProperty,Value>
    缓存时间Map<TslEvent,List<Value>>
    缓存服务Map<TslService,List<Value>>
    首次上报设置
    定时上报设置
    --method--
    添加设备
    删除设备
    连接设备
    发布消息（发送属性、事件）
    设置首次上报
    设置定时上报
    处理在离线消息（重连）
    处理mqtt消息（处理属性、服务）
    添加日志
]

Aggregate("Logger") [
    日志
    --id--
     *自增ID
      设备通信ID
      消息时间
      clientID
      payload
      在线状态
      发布成功状态
    --method--
    添加日志
]





ReadModel("DeviceModel") [
    设备列表
    --id--
    设备通信ID
    --field--
    设备名称
    产品通信类型
    产品型号
    在离线
]

ReadModel("ProductModel") [
    产品列表
    --id--
    产品ID/产品型号
    --field--
    产品通信类型
    tsl
]

ReadModel("LoggerModel") [
    日志
    --id--
    id: 自增序列
    --field--
    设备通信ID
    消息时间
    clientID
    payload
    在线状态
    发布成功状态
]


ReadModel("DeviceEventModel") [
    事件下发日志
    --id--
    id: 自增序列
    --field--
    事件key-value
    设备通信ID
    设备名称
    产品通信类型
    产品型号
    时间
]

ReadModel("DeviceServiceModel") [
    服务运行日志
    --id--
    id: 自增序列
    --field--
    服务key-value
    设备通信ID
    设备名称
    产品通信类型
    产品型号
    时间
]





Service("DemoService") [
    测试Service
    --rule--
    待定
]

FacadeCommand("DemoFacadeCommand") [
    测试FacadeCommand
    --rule--
    1.会员账号没有被暂停
    2.书已上架，没有被借出，没有被预定
    3.会员已预定或者借出的书小于3本
    4.书的二维码存在
    --fields--
    借书人：userId
    二维码
    --事件--
    书已被借出
]




Person("App") [
   app操作
]

Person("Mqtt") [
   mqtt消息
]




AddProductCommand--down-->Product
DeleteProductCommand--down-->ProductDeletedPolicy
ProductDeletedPolicy--down-->DeleteDeviceCommand
DeleteProductCommand--down-->Product
ParseProductTslCommand--down-->Product

Product--down-->ProductAdded
Product--down-->ProductDeleted
Product--down-->TslParsed

AddDeviceCommand--down-->VirtualDevice
DeleteDeviceCommand--down-->VirtualDevice
ConnectDeviceCommand--down-->VirtualDevice
DisConnectDeviceCommand--down-->VirtualDevice
FirstUpSettingCommand--down-->VirtualDevice
IntervalUpSettingCommand--down-->VirtualDevice
PublishMessageCommand--down-->VirtualDevice
HandleServiceCommand--down-->VirtualDevice
HandlePropertyCommand--down-->VirtualDevice


VirtualDevice--down-->DeviceAdded
VirtualDevice--down-->DeviceDeleted
VirtualDevice--down-->DeviceConnected
VirtualDevice--down-->DeviceDisConnected
VirtualDevice--down-->PropertyChangedAdded
VirtualDevice--down-->EventPublished
VirtualDevice--down-->ServiceTriggered
VirtualDevice--down-->FirstUpSettingChanged
VirtualDevice--down-->IntervalUpSettingChanged

AddLoggerCommand--down-->Logger
Logger--down-->LoggerAdded

Mqtt--down-->HandleReceiveDeviceDisconnectedCommand
HandleReceiveDeviceDisconnectedCommand--down-->AddLoggerPolicy
PublishMessageCommand--down-->AddLoggerPolicy
HandleReceiveDeviceDisconnectedCommand--down-->DeviceReconnectedPolicy
DeviceReconnectedPolicy--down-->ConnectDeviceCommand
Mqtt--down-->HandlerReceivedMessageCommand
HandlerReceivedMessageCommand--down-->AddLoggerPolicy
HandlerReceivedMessageCommand--down-->ToHandlePropertyPolicy
HandlerReceivedMessageCommand--down-->ToHandleServicePolicy
ToHandleServicePolicy--down-->HandleServiceCommand
ToHandlePropertyPolicy--down-->HandlePropertyCommand


AddLoggerPolicy--down-->AddLoggerCommand


App--down-->ConnectDeviceCommand
App--down-->AddDeviceCommand
App--down-->DeleteDeviceCommand
App--down-->DisConnectDeviceCommand
App--down-->FirstUpSettingCommand
App--down-->IntervalUpSettingCommand
App--down-->PublishMessageCommand

ProductAdded--down-->ProductModel
ProductDeleted--down-->ProductModel
TslParsed--down-->ProductModel

DeviceAdded--down-->DeviceModel
DeviceDeleted--down-->DeviceModel
DeviceConnected--down-->DeviceModel
DeviceDisConnected--down-->DeviceModel

LoggerAdded--down-->LoggerModel

EventPublished--down-->DeviceEventModel
ServiceTriggered--down-->DeviceServiceModel




@enduml