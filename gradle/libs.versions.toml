[versions]
accompanistSystemuicontroller = "0.31.0-alpha"
agp = "8.2.0"
android-compileSdk = "34"
android-minSdk = "24"
android-targetSdk = "34"
androidx-activityCompose = "1.8.2"
androidx-appcompat = "1.6.1"
kmpDateTimePicker = "1.0.2"
legacy-support-v4 = "1.0.0"
support-v4 = "30.4.1"
androidx-constraintlayout = "2.1.4"
androidx-core-ktx = "1.12.0"
androidx-espresso-core = "3.5.1"
androidx-material = "1.11.0"
androidx-test-junit = "1.1.5"
compose = "1.6.2"
compose-plugin = "1.6.0"
junit = "4.13.2"
kotlin = "1.9.22"
ktor = "2.3.8"
logback = "1.5.3"
ksp = "1.9.22-1.0.17" # ksp
kotlinpoet-ksp = "1.12.0"
kotlinpoet = "1.15.2"
nexus-publish = "2.0.0-rc-1" # publish lib
kotlinx-datetime = "0.6.0-RC.2"
kotlinx-serialization = "1.6.0"
coreI18n = "1.0.0-alpha01"
kotlinx-coroutines = "1.8.0"
# sqlDelight = "1.5.5"
sqlDelight2 = "2.0.1"
sqlite = "3.42.0.0"
statelyCommon = "1.2.5"
voyager = "1.0.0"
# DI
koin = "3.4.3"
koin-compose = "1.0.4"
hilt = "2.49"
# MQTT
mqtt3 = "1.2.5"
mqtt3-service = "1.1.1"
mqtt3-jvm-jdk15on = "1.70"
# KMQTT https://github.com/davidepianca98/KMQTT
kmqtt = "0.4.6"
# Android Lifecycle
android-lifecycle = "2.7.0"
firebaseCrashlyticsBuildtools = "2.9.9"
napier = "2.7.1"
zeeeeej = "0.0.2"
maven-publish = "0.28.0"



[libraries]
# third-lib
kmp-datetime-picker = { module = "network.chaintech:kmp-date-time-picker", version.ref = "kmpDateTimePicker" }
accompanist-systemuicontroller = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanistSystemuicontroller" }
# test
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
# android
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "androidx-core-ktx" }
androidx-test-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-junit" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "androidx-espresso-core" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "androidx-appcompat" }
androidx-material = { group = "com.google.android.material", name = "material", version.ref = "androidx-material" }
androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "androidx-constraintlayout" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-legacy-support-v4 = { module = "androidx.legacy:legacy-support-v4", version.ref = "legacy-support-v4" }
android-support-v4 = { module = "com.android.support:support-v4", version.ref = "support-v4" }
# compose 有BOM 还需要吗？
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
# ktor
ktor-server-core = { module = "io.ktor:ktor-server-core-jvm", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty-jvm", version.ref = "ktor" }
ktor-server-tests = { module = "io.ktor:ktor-server-tests-jvm", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-serialization-kotlinx-protobuf = { module = "io.ktor:ktor-serialization-kotlinx-protobuf", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
# voyager
voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyager" }
voyager-core = { module = "cafe.adriel.voyager:voyager-core", version.ref = "voyager" }
voyager-screenModel = { module = "cafe.adriel.voyager:voyager-screenmodel", version.ref = "voyager" }
voyager-bottomSheetNavigator = { module = "cafe.adriel.voyager:voyager-bottom-sheet-navigator", version.ref = "voyager" }
voyager-tabNavigator = { module = "cafe.adriel.voyager:voyager-tab-navigator", version.ref = "voyager" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyager" }
voyager-koin = { module = "cafe.adriel.voyager:voyager-koin", version.ref = "voyager" }
voyager-hilt = { module = "cafe.adriel.voyager:voyager-hilt", version.ref = "voyager" }
voyager-kodein = { module = "cafe.adriel.voyager:voyager-kodein", version.ref = "voyager" }
voyager-rxjava = { module = "cafe.adriel.voyager:voyager-rxjava", version.ref = "voyager" }
# publish
nexus-publish = { module = "io.github.gradle-nexus.publish-plugin:io.github.gradle-nexus.publish-plugin.gradle.plugin", version.ref = "nexus-publish" }  # publish lib
# ksp
ksp-api = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "ksp" }
kotlinpoet-ksp = { module = "com.squareup:kotlinpoet-ksp", version.ref = "kotlinpoet-ksp" }
kotlinpoet = { module = "com.squareup:kotlinpoet", version.ref = "kotlinpoet" }
# reflect
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
# kotlinx
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
androidx-core-i18n = { group = "androidx.core", name = "core-i18n", version.ref = "coreI18n" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
# https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/coroutines-guide-ui.md
kotlinx-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-javax = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-javax", version.ref = "kotlinx-coroutines" }
# sqlDelight
#sqlDelight-runtime = {module = "com.squareup.sqldelight:runtime", version.ref = "sqlDelight" }
#sqlDelight-driver-android = {module = "com.squareup.sqldelight:android-driver", version.ref = "sqlDelight" }
#sqlDelight-driver-native = {module = "com.squareup.sqldelight:native-driver", version.ref = "sqlDelight" }
#sqlDelight-driver-sqlite = {module = "com.squareup.sqldelight:sqlite-driver", version.ref = "sqlDelight" }
sqlDelight2-runtime = { module = "app.cash.sqldelight:runtime", version.ref = "sqlDelight2" }
sqlDelight2-adapter = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqlDelight2" }
sqlDelight2-driver-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqlDelight2" }
sqlDelight2-driver-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqlDelight2" }
sqlDelight2-driver-sqlite = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqlDelight2" }
# sqlite = { module = "org.xerial:sqlite-jdbc", version.ref = "sqlite" }
sqlite-stately-common = { module = "co.touchlab:stately-common", version.ref = "statelyCommon" }
sqlite-stately-concurrency = { module = "co.touchlab:stately-concurrency", version.ref = "statelyCommon" }
# DI
#koin = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koin" }
#koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin-compose" }
#hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }
#hilt-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hilt" }
#pluginHilt = { module = "com.google.dagger:hilt-android-gradle-plugin", version.ref = "hilt" }
# MQTT
mqtt3-client = { module = "org.eclipse.paho:org.eclipse.paho.client.mqttv3", version.ref = "mqtt3" }
mqtt3-android-service = { module = "org.eclipse.paho:org.eclipse.paho.android.service", version.ref = "mqtt3-service" }
mqtt3-jvm-jdk15on = { module = "org.bouncycastle:bcpkix-jdk15on", version.ref = "mqtt3-jvm-jdk15on" }
# KMQTT multiplatform
kmqtt-common = { module = "io.github.davidepianca98:kmqtt-common", version.ref = "kmqtt" }
kmqtt-client = { module = "io.github.davidepianca98:kmqtt-client", version.ref = "kmqtt" }
kmqtt-broker = { module = "io.github.davidepianca98:kmqtt-broker", version.ref = "kmqtt" }
# KMQTT single platform
kmqtt-common-jvm = { module = "io.github.davidepianca98:kmqtt-common-jvm", version.ref = "kmqtt" }
kmqtt-client-jvm = { module = "io.github.davidepianca98:kmqtt-client-jvm", version.ref = "kmqtt" }
kmqtt-broker-jvm = { module = "io.github.davidepianca98:kmqtt-broker-jvm", version.ref = "kmqtt" }
# Android Lifecycle
android-lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "android-lifecycle" }
android-lifecycle-livedata-ktx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "android-lifecycle" }
android-lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "android-lifecycle" }
android-lifecycle-viewmodel-savedstate = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "android-lifecycle" }
android-lifecycle-common-java8 = { module = "androidx.lifecycle:lifecycle-common-java8", version.ref = "android-lifecycle" }
android-lifecycle-compiler = { module = "androidx.lifecycle:lifecycle-compiler", version.ref = "android-lifecycle" }
android-lifecycle-service = { module = "androidx.lifecycle:lifecycle-service", version.ref = "android-lifecycle" }
android-lifecycle-process = { module = "androidx.lifecycle:lifecycle-process", version.ref = "android-lifecycle" }
firebase-crashlytics-buildtools = { group = "com.google.firebase", name = "firebase-crashlytics-buildtools", version.ref = "firebaseCrashlyticsBuildtools" }
# Log
# https://github.com/AAkira/Napier
napier = { module = "io.github.aakira:napier", version.ref = "napier" }
zeeeeej-zhongguohong = { module = "io.github.zeeeeej:zhongguohong", version.ref = "zeeeeej" }

[plugins]
cocoapods = { id = "native.cocoapods", version.ref = "kotlin" }
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "compose-plugin" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
# sqlDelight = { id = "com.squareup.sqldelight", version.ref = "sqlDelight" }
sqlDelight2 = { id = "app.cash.sqldelight", version.ref = "sqlDelight2" }
maven-publish = { id = "com.vanniktech.maven.publish", version.ref = "maven-publish" }

